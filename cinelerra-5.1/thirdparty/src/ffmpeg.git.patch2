diff -urN a/libavformat/mpegtsenc.c b/libavformat/mpegtsenc.c
--- a/libavformat/mpegtsenc.c	2018-04-20 04:02:57.000000000 -0600
+++ b/libavformat/mpegtsenc.c	2018-04-24 10:27:57.193689213 -0600
@@ -56,9 +56,8 @@
     int sid;           /* service ID */
     char *name;
     char *provider_name;
-    int pcr_pid;
-    int pcr_packet_count;
-    int pcr_packet_period;
+    int64_t pcr, pcr_packet_timer, pcr_packet_period;
+    int pcr_sid, pcr_pid;
     AVProgram *program;
 } MpegTSService;
 
@@ -78,14 +77,12 @@
     MpegTSSection pat; /* MPEG-2 PAT table */
     MpegTSSection sdt; /* MPEG-2 SDT table context */
     MpegTSService **services;
-    int sdt_packet_count;
-    int sdt_packet_period;
-    int pat_packet_count;
-    int pat_packet_period;
+    int64_t sdt_packet_timer, sdt_packet_period;
+    int64_t pat_packet_timer, pat_packet_period;
     int nb_services;
     int onid;
     int tsid;
-    int64_t first_pcr;
+    int64_t pcr, first_pcr, delay;
     int mux_rate; ///< set to 1 when VBR
     int pes_payload_size;
 
@@ -95,12 +92,14 @@
     int service_type;
 
     int pmt_start_pid;
+    int pcr_start_pid;
     int start_pid;
     int m2ts_mode;
+    int64_t ts_offset;
 
     int reemit_pat_pmt; // backward compatibility
 
-    int pcr_period;
+    double pcr_period;
 #define MPEGTS_FLAG_REEMIT_PAT_PMT  0x01
 #define MPEGTS_FLAG_AAC_LATM        0x02
 #define MPEGTS_FLAG_PAT_PMT_AT_FRAMES           0x04
@@ -111,8 +110,6 @@
     int tables_version;
     double pat_period;
     double sdt_period;
-    int64_t last_pat_ts;
-    int64_t last_sdt_ts;
 
     int omit_video_pes_length;
 } MpegTSWrite;
@@ -222,10 +219,10 @@
 #define DEFAULT_PROVIDER_NAME   "FFmpeg"
 #define DEFAULT_SERVICE_NAME    "Service01"
 
-/* we retransmit the SI info at this rate */
+/* we retransmit the SI info at this rate (ms) */
 #define SDT_RETRANS_TIME 500
 #define PAT_RETRANS_TIME 100
-#define PCR_RETRANS_TIME 20
+#define PCR_RETRANS_TIME 50
 
 typedef struct MpegTSWriteStream {
     struct MpegTSService *service;
@@ -721,6 +718,7 @@
     service->pmt.pid       = ts->pmt_start_pid + ts->nb_services;
     service->sid           = sid;
     service->pcr_pid       = 0x1fff;
+    service->pcr_sid       = 0x1fff;
     service->provider_name = av_strdup(provider_name);
     service->name          = av_strdup(name);
     if (!service->provider_name || !service->name)
@@ -736,18 +734,11 @@
     return NULL;
 }
 
-static int64_t get_pcr(const MpegTSWrite *ts, AVIOContext *pb)
-{
-    return av_rescale(avio_tell(pb) + 11, 8 * PCR_TIME_BASE, ts->mux_rate) +
-           ts->first_pcr;
-}
-
 static void mpegts_prefix_m2ts_header(AVFormatContext *s)
 {
     MpegTSWrite *ts = s->priv_data;
     if (ts->m2ts_mode) {
-        int64_t pcr = get_pcr(s->priv_data, s->pb);
-        uint32_t tp_extra_header = pcr % 0x3fffffff;
+        uint32_t tp_extra_header = ts->pcr % 0x3fffffff;
         tp_extra_header = AV_RB32(&tp_extra_header);
         avio_write(s->pb, (unsigned char *) &tp_extra_header,
                    sizeof(tp_extra_header));
@@ -768,6 +759,7 @@
     MpegTSService *service;
     AVStream *st, *pcr_st = NULL;
     AVDictionaryEntry *title, *provider;
+    double clk_rate;
     int i, j;
     const char *service_name;
     const char *provider_name;
@@ -776,6 +768,15 @@
 
     if (s->max_delay < 0) /* Not set by the caller */
         s->max_delay = 0;
+    ts->delay = av_rescale(s->max_delay, 90000, AV_TIME_BASE);
+
+    if (ts->m2ts_mode == -1) {
+        if (av_match_ext(s->url, "m2ts")) {
+            ts->m2ts_mode = 1;
+        } else {
+            ts->m2ts_mode = 0;
+        }
+    }
 
     // round up to a whole number of TS packets
     ts->pes_payload_size = (ts->pes_payload_size + 14 + 183) / 184 * 184 - 14;
@@ -822,6 +823,8 @@
             service->program          = program;
         }
     }
+    if (ts->m2ts_mode > 1)
+        service->pmt.pid = 0x00ff + ts->service_id;
 
     ts->pat.pid          = PAT_PID;
     /* Initialize at 15 so that it wraps and is equal to 0 for the
@@ -907,10 +910,9 @@
         ts_st->discontinuity   = ts->flags & MPEGTS_FLAG_DISCONT;
         /* update PCR pid by using the first video stream */
         if (st->codecpar->codec_type == AVMEDIA_TYPE_VIDEO &&
-            service->pcr_pid == 0x1fff) {
-            service->pcr_pid = ts_st->pid;
+            service->pcr_sid == 0x1fff)
             pcr_st           = st;
-        }
+
         if (st->codecpar->codec_id == AV_CODEC_ID_AAC &&
             st->codecpar->extradata_size > 0) {
             AVStream *ast;
@@ -946,78 +948,47 @@
     av_freep(&pids);
 
     /* if no video stream, use the first stream as PCR */
-    if (service->pcr_pid == 0x1fff && s->nb_streams > 0) {
-        pcr_st           = s->streams[0];
-        ts_st            = pcr_st->priv_data;
-        service->pcr_pid = ts_st->pid;
-    } else
-        ts_st = pcr_st->priv_data;
-
-    if (ts->mux_rate > 1) {
-        service->pcr_packet_period = (int64_t)ts->mux_rate * ts->pcr_period /
-                                     (TS_PACKET_SIZE * 8 * 1000);
-        ts->sdt_packet_period      = (int64_t)ts->mux_rate * SDT_RETRANS_TIME /
-                                     (TS_PACKET_SIZE * 8 * 1000);
-        ts->pat_packet_period      = (int64_t)ts->mux_rate * PAT_RETRANS_TIME /
-                                     (TS_PACKET_SIZE * 8 * 1000);
-
-        if (ts->copyts < 1)
-            ts->first_pcr = av_rescale(s->max_delay, PCR_TIME_BASE, AV_TIME_BASE);
-    } else {
-        /* Arbitrary values, PAT/PMT will also be written on video key frames */
-        ts->sdt_packet_period = 200;
-        ts->pat_packet_period = 40;
-        if (pcr_st->codecpar->codec_type == AVMEDIA_TYPE_AUDIO) {
-            int frame_size = av_get_audio_frame_duration2(pcr_st->codecpar, 0);
-            if (!frame_size) {
-                av_log(s, AV_LOG_WARNING, "frame size not set\n");
-                service->pcr_packet_period =
-                    pcr_st->codecpar->sample_rate / (10 * 512);
-            } else {
-                service->pcr_packet_period =
-                    pcr_st->codecpar->sample_rate / (10 * frame_size);
-            }
-        } else {
-            // max delta PCR 0.1s
-            // TODO: should be avg_frame_rate
-            service->pcr_packet_period =
-                ts_st->user_tb.den / (10 * ts_st->user_tb.num);
-        }
-        if (!service->pcr_packet_period)
-            service->pcr_packet_period = 1;
-    }
-
-    ts->last_pat_ts = AV_NOPTS_VALUE;
-    ts->last_sdt_ts = AV_NOPTS_VALUE;
-    // The user specified a period, use only it
-    if (ts->pat_period < INT_MAX/2) {
-        ts->pat_packet_period = INT_MAX;
+    if (!pcr_st && s->nb_streams > 0)
+        pcr_st = s->streams[0];
+    if (!pcr_st) {
+        av_log(s, AV_LOG_ERROR, "no streams\n");
+        ret = AVERROR(EINVAL);
+        goto fail;
     }
-    if (ts->sdt_period < INT_MAX/2) {
-        ts->sdt_packet_period = INT_MAX;
+    ts_st  = pcr_st->priv_data;
+    if (service->pcr_sid == 0x1fff)
+        service->pcr_sid   = ts_st->pid;
+    if (service->pcr_pid == 0x1fff)
+        service->pcr_pid   = ts->m2ts_mode > 1 ?
+            0x1000 + ts->service_id : service->pcr_sid ;
+    if (service->pmt.pid == service->pcr_pid) {
+        av_log(s, AV_LOG_ERROR, "Duplicate stream id %d\n", service->pcr_pid);
+        ret = AVERROR(EINVAL);
+        goto fail;
     }
 
+    clk_rate = ts->mux_rate > 1 ? ts->mux_rate : PCR_TIME_BASE;
+    ts->sdt_packet_period      = ts->sdt_period < 0 ? -1 : ts->sdt_period/1000 * clk_rate;
+    ts->pat_packet_period      = ts->pat_period/1000 * clk_rate;
+    service->pcr_packet_period = ts->pcr_period/1000 * clk_rate;
+    if (service->pcr_packet_period < (TS_PACKET_SIZE*8*10))
+        service->pcr_packet_period = (TS_PACKET_SIZE*8*10);
+    av_log(s, AV_LOG_VERBOSE, "clk_rate %f: ticks/pkt %d pcr, %d sdt, %d pmt\n", clk_rate,
+        (int)service->pcr_packet_period, (int)ts->sdt_packet_period, (int)ts->pat_packet_period);
+
+    if (ts->copyts < 1)
+        ts->first_pcr = av_rescale(s->max_delay, PCR_TIME_BASE, AV_TIME_BASE);
+
     // output a PCR as soon as possible
-    service->pcr_packet_count = service->pcr_packet_period;
-    ts->pat_packet_count      = ts->pat_packet_period - 1;
-    ts->sdt_packet_count      = ts->sdt_packet_period - 1;
+    ts->pcr = 0;
+    service->pcr_packet_timer = 0;
+    ts->pat_packet_timer      = 0;
+    ts->sdt_packet_timer      = 0;
 
     if (ts->mux_rate == 1)
         av_log(s, AV_LOG_VERBOSE, "muxrate VBR, ");
     else
         av_log(s, AV_LOG_VERBOSE, "muxrate %d, ", ts->mux_rate);
-    av_log(s, AV_LOG_VERBOSE,
-           "pcr every %d pkts, sdt every %d, pat/pmt every %d pkts\n",
-           service->pcr_packet_period,
-           ts->sdt_packet_period, ts->pat_packet_period);
-
-    if (ts->m2ts_mode == -1) {
-        if (av_match_ext(s->url, "m2ts")) {
-            ts->m2ts_mode = 1;
-        } else {
-            ts->m2ts_mode = 0;
-        }
-    }
 
     return 0;
 
@@ -1032,22 +1003,12 @@
     MpegTSWrite *ts = s->priv_data;
     int i;
 
-    if (++ts->sdt_packet_count == ts->sdt_packet_period ||
-        (dts != AV_NOPTS_VALUE && ts->last_sdt_ts == AV_NOPTS_VALUE) ||
-        (dts != AV_NOPTS_VALUE && dts - ts->last_sdt_ts >= ts->sdt_period*90000.0)
-    ) {
-        ts->sdt_packet_count = 0;
-        if (dts != AV_NOPTS_VALUE)
-            ts->last_sdt_ts = FFMAX(dts, ts->last_sdt_ts);
+    if ( ts->sdt_packet_period >= 0 && ts->pcr >= ts->sdt_packet_timer ) {
+        ts->sdt_packet_timer = ts->pcr + ts->sdt_packet_period;
         mpegts_write_sdt(s);
     }
-    if (++ts->pat_packet_count == ts->pat_packet_period ||
-        (dts != AV_NOPTS_VALUE && ts->last_pat_ts == AV_NOPTS_VALUE) ||
-        (dts != AV_NOPTS_VALUE && dts - ts->last_pat_ts >= ts->pat_period*90000.0) ||
-        force_pat) {
-        ts->pat_packet_count = 0;
-        if (dts != AV_NOPTS_VALUE)
-            ts->last_pat_ts = FFMAX(dts, ts->last_pat_ts);
+    if (ts->pcr >= ts->pat_packet_timer || force_pat) {
+        ts->pat_packet_timer = ts->pcr + ts->pat_packet_period;
         mpegts_write_pat(s);
         for (i = 0; i < ts->nb_services; i++)
             mpegts_write_pmt(s, ts->services[i]);
@@ -1089,13 +1050,14 @@
 {
     MpegTSWrite *ts = s->priv_data;
     MpegTSWriteStream *ts_st = st->priv_data;
+    uint32_t pcr_pid = ts_st->service->pcr_pid;
     uint8_t *q;
     uint8_t buf[TS_PACKET_SIZE];
 
     q    = buf;
     *q++ = 0x47;
-    *q++ = ts_st->pid >> 8;
-    *q++ = ts_st->pid;
+    *q++ = pcr_pid >> 8;
+    *q++ = pcr_pid;
     *q++ = 0x20 | ts_st->cc;   /* Adaptation only */
     /* Continuity Count field does not increment (see 13818-1 section 2.4.3.3) */
     *q++ = TS_PACKET_SIZE - 5; /* Adaptation Field Length */
@@ -1106,7 +1068,7 @@
     }
 
     /* PCR coded into 6 bytes */
-    q += write_pcr_bits(q, get_pcr(ts, s->pb));
+    q += write_pcr_bits(q, ts->pcr);
 
     /* stuffing bytes */
     memset(q, 0xFF, TS_PACKET_SIZE - (q - buf));
@@ -1175,8 +1137,6 @@
     uint8_t *q;
     int val, is_start, len, header_len, write_pcr, is_dvb_subtitle, is_dvb_teletext, flags;
     int afc_len, stuffing_len;
-    int64_t pcr = -1; /* avoid warning */
-    int64_t delay = av_rescale(s->max_delay, 90000, AV_TIME_BASE);
     int force_pat = st->codecpar->codec_type == AVMEDIA_TYPE_VIDEO && key && !ts_st->prev_payload_key;
 
     av_assert0(ts_st->payload != buf || st->codecpar->codec_type != AVMEDIA_TYPE_VIDEO);
@@ -1186,28 +1146,33 @@
 
     is_start = 1;
     while (payload_size > 0) {
+        ts->pcr = ts->first_pcr + (ts->mux_rate == 1 ?
+            (dts == AV_NOPTS_VALUE ? 0 : (dts - ts->delay) * 300) :
+            // add 11, pcr references the last byte of program clock reference base
+            av_rescale(avio_tell(s->pb) + 11, 8 * PCR_TIME_BASE, ts->mux_rate));
+
         retransmit_si_info(s, force_pat, dts);
         force_pat = 0;
 
         write_pcr = 0;
-        if (ts_st->pid == ts_st->service->pcr_pid) {
-            if (ts->mux_rate > 1 || is_start) // VBR pcr period is based on frames
-                ts_st->service->pcr_packet_count++;
-            if (ts_st->service->pcr_packet_count >=
-                ts_st->service->pcr_packet_period) {
-                ts_st->service->pcr_packet_count = 0;
+        if (ts_st->pid == ts_st->service->pcr_sid) {
+            if( ts->pcr >= ts_st->service->pcr_packet_timer ) {
+                ts_st->service->pcr_packet_timer = ts->pcr + ts_st->service->pcr_packet_period;
                 write_pcr = 1;
             }
         }
-
+        if (write_pcr && ts_st->service->pcr_sid != ts_st->service->pcr_pid) {
+           mpegts_insert_pcr_only(s, st);
+           continue;
+        }
         if (ts->mux_rate > 1 && dts != AV_NOPTS_VALUE &&
-            (dts - get_pcr(ts, s->pb) / 300) > delay) {
-            /* pcr insert gets priority over null packet insert */
-            if (write_pcr)
-                mpegts_insert_pcr_only(s, st);
+               (dts - ts->pcr / 300) > ts->delay) {
+           /* pcr insert gets priority over null packet insert */
+           if (write_pcr)
+               mpegts_insert_pcr_only(s, st);
             else
-                mpegts_insert_null_packet(s);
-            /* recalculate write_pcr and possibly retransmit si_info */
+               mpegts_insert_null_packet(s);
+            /* recalculate write_pcr and possibly retransimit si_info */
             continue;
         }
 
@@ -1217,6 +1182,10 @@
         val  = ts_st->pid >> 8;
         if (is_start)
             val |= 0x40;
+        if (st->codecpar->codec_type == AVMEDIA_TYPE_AUDIO &&
+          st->codecpar->codec_id == AV_CODEC_ID_AC3 &&
+          ts->m2ts_mode > 1)
+            val |= 0x20;
         *q++      = val;
         *q++      = ts_st->pid;
         ts_st->cc = ts_st->cc + 1 & 0xf;
@@ -1228,7 +1197,7 @@
         }
         if (key && is_start && pts != AV_NOPTS_VALUE) {
             // set Random Access for key frames
-            if (ts_st->pid == ts_st->service->pcr_pid)
+            if (ts_st->pid == ts_st->service->pcr_sid)
                 write_pcr = 1;
             set_af_flag(buf, 0x40);
             q = get_ts_payload_start(buf);
@@ -1236,14 +1205,10 @@
         if (write_pcr) {
             set_af_flag(buf, 0x10);
             q = get_ts_payload_start(buf);
-            // add 11, pcr references the last byte of program clock reference base
             if (ts->mux_rate > 1)
-                pcr = get_pcr(ts, s->pb);
-            else
-                pcr = (dts - delay) * 300;
-            if (dts != AV_NOPTS_VALUE && dts < pcr / 300)
+            if (dts != AV_NOPTS_VALUE && dts < ts->pcr / 300)
                 av_log(s, AV_LOG_WARNING, "dts < pcr, TS is invalid\n");
-            extend_af(buf, write_pcr_bits(q, pcr));
+            extend_af(buf, write_pcr_bits(q, ts->pcr));
             q = get_ts_payload_start(buf);
         }
         if (is_start) {
@@ -1344,11 +1309,13 @@
             *q++ = flags;
             *q++ = header_len;
             if (pts != AV_NOPTS_VALUE) {
-                write_pts(q, flags >> 6, pts);
+                int64_t ts_pts = pts + ts->ts_offset;
+                write_pts(q, flags >> 6, ts_pts);
                 q += 5;
             }
             if (dts != AV_NOPTS_VALUE && pts != AV_NOPTS_VALUE && dts != pts) {
-                write_pts(q, 1, dts);
+                int64_t ts_dts = dts + ts->ts_offset;
+                write_pts(q, 1, ts_dts);
                 q += 5;
             }
             if (pes_extension && st->codecpar->codec_id == AV_CODEC_ID_DIRAC) {
@@ -1519,7 +1486,6 @@
     uint8_t *data = NULL;
     MpegTSWrite *ts = s->priv_data;
     MpegTSWriteStream *ts_st = st->priv_data;
-    const int64_t delay = av_rescale(s->max_delay, 90000, AV_TIME_BASE) * 2;
     int64_t dts = pkt->dts, pts = pkt->pts;
     int opus_samples = 0;
     int side_data_size;
@@ -1540,16 +1506,15 @@
     }
 
     if (ts->flags & MPEGTS_FLAG_REEMIT_PAT_PMT) {
-        ts->pat_packet_count = ts->pat_packet_period - 1;
-        ts->sdt_packet_count = ts->sdt_packet_period - 1;
+        ts->pat_packet_timer = ts->sdt_packet_timer = 0;
         ts->flags           &= ~MPEGTS_FLAG_REEMIT_PAT_PMT;
     }
 
     if (ts->copyts < 1) {
         if (pts != AV_NOPTS_VALUE)
-            pts += delay;
+            pts += 2*ts->delay;
         if (dts != AV_NOPTS_VALUE)
-            dts += delay;
+            dts += 2*ts->delay;
     }
 
     if (ts_st->first_pts_check && pts == AV_NOPTS_VALUE) {
@@ -1737,7 +1702,7 @@
             AVStream *st2 = s->streams[i];
             MpegTSWriteStream *ts_st2 = st2->priv_data;
             if (   ts_st2->payload_size
-               && (ts_st2->payload_dts == AV_NOPTS_VALUE || dts - ts_st2->payload_dts > delay/2)) {
+               && (ts_st2->payload_dts == AV_NOPTS_VALUE || dts - ts_st2->payload_dts > ts->delay)) {
                 mpegts_write_pes(s, st2, ts_st2->payload, ts_st2->payload_size,
                                  ts_st2->payload_pts, ts_st2->payload_dts,
                                  ts_st2->payload_flags & AV_PKT_FLAG_KEY, stream_id);
@@ -1908,12 +1873,18 @@
     { "mpegts_pmt_start_pid", "Set the first pid of the PMT.",
       offsetof(MpegTSWrite, pmt_start_pid), AV_OPT_TYPE_INT,
       { .i64 = 0x1000 }, 0x0010, 0x1f00, AV_OPT_FLAG_ENCODING_PARAM },
+    { "mpegts_pcr_start_pid", "Set the first pid of the PCR.",
+      offsetof(MpegTSWrite, pcr_start_pid), AV_OPT_TYPE_INT,
+      { .i64 = 0x1000 }, 0x0010, 0x1f00, AV_OPT_FLAG_ENCODING_PARAM },
     { "mpegts_start_pid", "Set the first pid.",
       offsetof(MpegTSWrite, start_pid), AV_OPT_TYPE_INT,
       { .i64 = 0x0100 }, 0x0010, 0x0f00, AV_OPT_FLAG_ENCODING_PARAM },
     { "mpegts_m2ts_mode", "Enable m2ts mode.",
       offsetof(MpegTSWrite, m2ts_mode), AV_OPT_TYPE_BOOL,
-      { .i64 = -1 }, -1, 1, AV_OPT_FLAG_ENCODING_PARAM },
+      { .i64 = -1 }, -1, 2, AV_OPT_FLAG_ENCODING_PARAM },
+    { "mpegts_pcr_offset", "clock offset.",
+      offsetof(MpegTSWrite, ts_offset), AV_OPT_TYPE_BOOL,
+      { .i64 = 0 }, INT_MIN, INT_MAX, AV_OPT_FLAG_ENCODING_PARAM },
     { "muxrate", NULL,
       offsetof(MpegTSWrite, mux_rate), AV_OPT_TYPE_INT,
       { .i64 = 1 }, 0, INT_MAX, AV_OPT_FLAG_ENCODING_PARAM },
@@ -1951,15 +1922,15 @@
     { "omit_video_pes_length", "Omit the PES packet length for video packets",
       offsetof(MpegTSWrite, omit_video_pes_length), AV_OPT_TYPE_BOOL,
       { .i64 = 1 }, 0, 1, AV_OPT_FLAG_ENCODING_PARAM },
-    { "pcr_period", "PCR retransmission time in milliseconds",
-      offsetof(MpegTSWrite, pcr_period), AV_OPT_TYPE_INT,
-      { .i64 = PCR_RETRANS_TIME }, 0, INT_MAX, AV_OPT_FLAG_ENCODING_PARAM },
-    { "pat_period", "PAT/PMT retransmission time limit in seconds",
+    { "pcr_period", "PCR retransmission time limit in msecs",
+      offsetof(MpegTSWrite, pcr_period), AV_OPT_TYPE_DOUBLE,
+      { .dbl = PCR_RETRANS_TIME }, 0, INT_MAX, AV_OPT_FLAG_ENCODING_PARAM },
+    { "pat_period", "PAT/PMT retransmission time limit in msecs",
       offsetof(MpegTSWrite, pat_period), AV_OPT_TYPE_DOUBLE,
-      { .dbl = INT_MAX }, 0, INT_MAX, AV_OPT_FLAG_ENCODING_PARAM },
-    { "sdt_period", "SDT retransmission time limit in seconds",
+      { .dbl = PAT_RETRANS_TIME }, 0, INT_MAX, AV_OPT_FLAG_ENCODING_PARAM },
+    { "sdt_period", "SDT retransmission time limit in msecs",
       offsetof(MpegTSWrite, sdt_period), AV_OPT_TYPE_DOUBLE,
-      { .dbl = INT_MAX }, 0, INT_MAX, AV_OPT_FLAG_ENCODING_PARAM },
+      { .dbl = SDT_RETRANS_TIME }, -1, INT_MAX, AV_OPT_FLAG_ENCODING_PARAM },
     { NULL },
 };
 
